#pragma once

class Game
{
	Player** players;                // массив возможных состояний игрока в соответствии с текущей картой
	Player* hero;                    // игрок
	Map** maps;                      // массив всех карт
	Map* current_map;                // карта, на которой находится игрок в данный момент (возможно ненужное поле)
	Bonuses bonuses;                 // бонусы
	Clock timer;                     // таймер
	bool end_of_the_game;            // флаг об окончании игры
	RenderWindow window;             // окно
	Music music;                     // фоновая музыка

	// конструктор
	Game()
	{
		// создаётся окно
		// подключается музыка
		// стартовые настройки
	}

	// общий принцип работы программы
	void WorkOfTheGame()
	{
		// включается музыка
		
		// пока не закрыли окно
		   // отображение стартового окна
		   // игровой процесс
		   // победа или поражение
	}

	// Стартовое окно
	void StartWindow()
	{
		// отображение фона, названия игры и рабочей кнопки СТАРТ
	}

	// Игровой процесс
	void GameProcess()
	{
		// запуск таймера
		// стартовое состояние (кол-во набранных очков - 0, количество жизней - все)

		// генерация взаимного расположения карт и передача соответствующих координат в классы потомки Map
		// генерация мобов для карты с мобами (отдельная функция в потомке класса Map)
		// генерация препятствий для карты статического движения (отдельная функция в потомке класса Map)
		// генерация бонусов (отдельная функция в классе Bonuses)
		// генерация исходного расположения игрока с учётом расположения мобов, препятствий и бонусов ???

		// пока не закрыли окно или игрок не проиграл или не набрали максимальное число очков
		   // движение мобов (отдельная функция в потомке класса Map)
		   // обработка событий
		      // проверка закрытия окна
			  // нажата одна из стрелок
			     // проверка перехода на новую карту (если да, переопределение поля hero и current_map)
				 // движение (отдельная функция в потомке класса Player)
				 // проверка на получение бонуса (отдельная функция в классе Bonuses, если да - увеличение очков игрока)
			  // нажата кнопка SPACE и игрок находится на карте с мобами - атака (отдельная функция в классе Player)
		   // отображение объектов
		      // отображение фона для поля с таймеров, очками и жизнями
			  // отображение оставшихся жизней
			  // отображение количества набранных очков
		      // отображение таймера
		      // отображение четырёх карт (отдельные функции отображения для каждого класса потомка Map)
			  // оторажение оставшихся бонусов (отдельная функция в классе Bonuses)
		      // отображение игрока (отдельная функция в классе Player для отрисовки покоя или движения игрока)
	}

	// Победа
	void Victory()
	{
		// отображение фона, сообщения о победе и количестве набранных очков
	}

	// Поражение
	void Defeat()
	{
		// отображение фона, сообщения о поражении и количестве набранных очков
	}

	// деструктор
	~Game()
	{
		// закрывается окно
	}
};

class Player
{
	// спрайт
	// изображение
	// текстура
	// координаты
	// размеры
	// скорость
	// направление движения
	// количество оставшихся жизней
	// количество набранных очков
	// флаг отображения

	// конструктор
	// присваивание координат игрока (из класса Game)
	// увеличение количества набранных очков
	// возврат количества оставшихся жизней
	// возврат количества набранных очков
	// движение (изменение координат, если это возможно, переопределение для каждого класса потомка)
	// отображение (если флаг отображения = true, в движении и состоянии покоя)
	// деструктор

	// 4 класса потомка
	   // на карте-невидимке (проверка на внешние границы, флаг отображения = false)
	   // карта с мобами (проверка на внешние границы, если игрок зашёл в окружение моба ???, добавдение функции для атаки)
	   // карта статического движения (проверка на внешние границы и препятствия)
	   // карта движения по вектору ???
};

class HostileMobs
{
	// спрайт
	// изображение
	// текстура
	// координаты
	// размеры
	// скорость
	// направление движения
	// флаг живой или мёртвый

	// конструктор
	// присваивание координат моба (из класса Map)
	// движение
	// атака ???
	// смерть при птаке игрока ???
	// отображение (если живой)
	// деструктор
};

class Map
{
	// прямоугольник (для оторажения)
	// текстура
	// координаты
	// размер

	// конструктор
	// присваивание координат карты (из класса Game)
	// генерация бонусов на конкретной карте
	// движение 
	// отображение
	// деструктор

	// 4 класса потомка
	   // карта-невидимка
	   // карта с мобами (добавляется массив указателей на объекты класса HostileMobs, добавляютя функции для генерации количества и начального расположения мобов и движения живых мобов, в функции отрисовки добавляется отрисовка живых мобов)
	   // карта статического движения (добавляются новые поля, связанные с препятствиями, добавляются функции для генерации количества и расположения препятствий, в функции отрисовки добавляется отрисовка препятствий)
	   // карта движения по вектору ???
};

struct Bonus
{
	// спрайт или фигура (для отображения)
	// координаты
	// текущий вид (для анимации)
	// флаг собран или нет
};

class Bonuses
{
	// массив структур Bonus
	// изображение
	// текстура
	// размеры

	// конструктор
	// генерация бонусов
	   // генерация количества бонусов на карте с мобами (рандомно из диапазона), вызов отдельной функции из потомка класса Map для генерации их расположения
	   // генерация количества бонусов на карте статического движения (рандомно из диапазона), вызов отдельной функции из потомка класса Map для генерации их расположения
	   // генерация количества бонусов на карте движения по вектору (рандомно из диапазона), вызов отдельной функции из потомка класса Map для генерации их расположения
	   // генерация количества бонусов на карте-невидимке (оставшееся количество), вызов отдельной функции из потомка класса Map для генерации их расположения
	// проверка на получение бонуса (если игрок собрал бонус, флаг собран ил нет = true)
	// отображение оставшихся бонусов (анимация поворотоа монет, непример)
	// деструктор
};